//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Wozware.Downslope
{
    public partial class @DownslopeControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DownslopeControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9419c21b-4056-4aa4-b461-a1d168a7504f"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""8be604d9-cf81-4b90-a577-6d6aff969a91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""a063f29c-23b8-4320-8371-e0b7f8e40f57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CarveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9fb0286b-4f45-4c18-b8c5-600175a0567a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CarveRight"",
                    ""type"": ""Button"",
                    ""id"": ""8db376ca-976c-44c1-bd08-7b54e379a446"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""358d6263-690f-4b42-9f0b-68509c6a6d33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SendIt"",
                    ""type"": ""Button"",
                    ""id"": ""a78e780d-41d9-4ba8-8440-86dffe658a36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ef5ab45-ae7e-43c1-a169-9a4ed4cd11eb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eaeb4c2-a4b4-498b-be29-f65326ca6862"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33942492-1929-4d2a-b503-21f795f949fd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce39d91e-a6aa-4b66-bb78-a7b0052490b9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CarveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd80be93-c2cf-4511-b344-8dc808ce792d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CarveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c121988-2c1d-4101-86d5-7084a09894d9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SendIt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Enter = m_Player.FindAction("Enter", throwIfNotFound: true);
            m_Player_Escape = m_Player.FindAction("Escape", throwIfNotFound: true);
            m_Player_CarveLeft = m_Player.FindAction("CarveLeft", throwIfNotFound: true);
            m_Player_CarveRight = m_Player.FindAction("CarveRight", throwIfNotFound: true);
            m_Player_Brake = m_Player.FindAction("Brake", throwIfNotFound: true);
            m_Player_SendIt = m_Player.FindAction("SendIt", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Enter;
        private readonly InputAction m_Player_Escape;
        private readonly InputAction m_Player_CarveLeft;
        private readonly InputAction m_Player_CarveRight;
        private readonly InputAction m_Player_Brake;
        private readonly InputAction m_Player_SendIt;
        public struct PlayerActions
        {
            private @DownslopeControls m_Wrapper;
            public PlayerActions(@DownslopeControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Enter => m_Wrapper.m_Player_Enter;
            public InputAction @Escape => m_Wrapper.m_Player_Escape;
            public InputAction @CarveLeft => m_Wrapper.m_Player_CarveLeft;
            public InputAction @CarveRight => m_Wrapper.m_Player_CarveRight;
            public InputAction @Brake => m_Wrapper.m_Player_Brake;
            public InputAction @SendIt => m_Wrapper.m_Player_SendIt;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @CarveLeft.started += instance.OnCarveLeft;
                @CarveLeft.performed += instance.OnCarveLeft;
                @CarveLeft.canceled += instance.OnCarveLeft;
                @CarveRight.started += instance.OnCarveRight;
                @CarveRight.performed += instance.OnCarveRight;
                @CarveRight.canceled += instance.OnCarveRight;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @SendIt.started += instance.OnSendIt;
                @SendIt.performed += instance.OnSendIt;
                @SendIt.canceled += instance.OnSendIt;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Enter.started -= instance.OnEnter;
                @Enter.performed -= instance.OnEnter;
                @Enter.canceled -= instance.OnEnter;
                @Escape.started -= instance.OnEscape;
                @Escape.performed -= instance.OnEscape;
                @Escape.canceled -= instance.OnEscape;
                @CarveLeft.started -= instance.OnCarveLeft;
                @CarveLeft.performed -= instance.OnCarveLeft;
                @CarveLeft.canceled -= instance.OnCarveLeft;
                @CarveRight.started -= instance.OnCarveRight;
                @CarveRight.performed -= instance.OnCarveRight;
                @CarveRight.canceled -= instance.OnCarveRight;
                @Brake.started -= instance.OnBrake;
                @Brake.performed -= instance.OnBrake;
                @Brake.canceled -= instance.OnBrake;
                @SendIt.started -= instance.OnSendIt;
                @SendIt.performed -= instance.OnSendIt;
                @SendIt.canceled -= instance.OnSendIt;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnEnter(InputAction.CallbackContext context);
            void OnEscape(InputAction.CallbackContext context);
            void OnCarveLeft(InputAction.CallbackContext context);
            void OnCarveRight(InputAction.CallbackContext context);
            void OnBrake(InputAction.CallbackContext context);
            void OnSendIt(InputAction.CallbackContext context);
        }
    }
}
